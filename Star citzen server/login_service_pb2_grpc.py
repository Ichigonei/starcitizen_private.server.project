# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import login_service_pb2 as login__service__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in login_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LoginServiceStub(object):
    """------------------- LOGIN SERVICE -------------------
    Updated to match the real Star Citizen client protocol
    Handles authentication and session management only
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitiateLogin = channel.unary_unary(
                '/sc.external.services.login.v1.LoginService/InitiateLogin',
                request_serializer=login__service__pb2.InitiateLoginRequest.SerializeToString,
                response_deserializer=login__service__pb2.InitiateLoginResponse.FromString,
                _registered_method=True)
        self.CancelLogin = channel.unary_unary(
                '/sc.external.services.login.v1.LoginService/CancelLogin',
                request_serializer=login__service__pb2.CancelLoginRequest.SerializeToString,
                response_deserializer=login__service__pb2.CancelLoginResponse.FromString,
                _registered_method=True)
        self.RefreshAuth = channel.unary_unary(
                '/sc.external.services.login.v1.LoginService/RefreshAuth',
                request_serializer=login__service__pb2.RefreshAuthRequest.SerializeToString,
                response_deserializer=login__service__pb2.RefreshAuthResponse.FromString,
                _registered_method=True)
        self.ValidateToken = channel.unary_unary(
                '/sc.external.services.login.v1.LoginService/ValidateToken',
                request_serializer=login__service__pb2.ValidateTokenRequest.SerializeToString,
                response_deserializer=login__service__pb2.ValidateTokenResponse.FromString,
                _registered_method=True)
        self.VerifyDevice = channel.unary_unary(
                '/sc.external.services.login.v1.LoginService/VerifyDevice',
                request_serializer=login__service__pb2.VerifyDeviceRequest.SerializeToString,
                response_deserializer=login__service__pb2.VerifyDeviceResponse.FromString,
                _registered_method=True)
        self.Complete2FA = channel.unary_unary(
                '/sc.external.services.login.v1.LoginService/Complete2FA',
                request_serializer=login__service__pb2.Complete2FARequest.SerializeToString,
                response_deserializer=login__service__pb2.Complete2FAResponse.FromString,
                _registered_method=True)
        self.UpdateFromStarNetwork = channel.unary_unary(
                '/sc.external.services.login.v1.LoginService/UpdateFromStarNetwork',
                request_serializer=login__service__pb2.UpdateFromStarNetworkRequest.SerializeToString,
                response_deserializer=login__service__pb2.UpdateFromStarNetworkResponse.FromString,
                _registered_method=True)
        self.SetLobbyReady = channel.unary_unary(
                '/sc.external.services.login.v1.LoginService/SetLobbyReady',
                request_serializer=login__service__pb2.SetLobbyReadyRequest.SerializeToString,
                response_deserializer=login__service__pb2.SetLobbyReadyResponse.FromString,
                _registered_method=True)
        self.MonitorConnection = channel.unary_unary(
                '/sc.external.services.login.v1.LoginService/MonitorConnection',
                request_serializer=login__service__pb2.MonitorConnectionRequest.SerializeToString,
                response_deserializer=login__service__pb2.MonitorConnectionResponse.FromString,
                _registered_method=True)
        self.ReportError = channel.unary_unary(
                '/sc.external.services.login.v1.LoginService/ReportError',
                request_serializer=login__service__pb2.ReportErrorRequest.SerializeToString,
                response_deserializer=login__service__pb2.ReportErrorResponse.FromString,
                _registered_method=True)
        self.ProcessEntitlements = channel.unary_unary(
                '/sc.external.services.login.v1.LoginService/ProcessEntitlements',
                request_serializer=login__service__pb2.ProcessEntitlementsRequest.SerializeToString,
                response_deserializer=login__service__pb2.ProcessEntitlementsResponse.FromString,
                _registered_method=True)
        self.ReconcileAccount = channel.unary_unary(
                '/sc.external.services.login.v1.LoginService/ReconcileAccount',
                request_serializer=login__service__pb2.ReconcileAccountRequest.SerializeToString,
                response_deserializer=login__service__pb2.ReconcileAccountResponse.FromString,
                _registered_method=True)
        self.UpdateCharacterStatus = channel.unary_unary(
                '/sc.external.services.login.v1.LoginService/UpdateCharacterStatus',
                request_serializer=login__service__pb2.UpdateCharacterStatusRequest.SerializeToString,
                response_deserializer=login__service__pb2.UpdateCharacterStatusResponse.FromString,
                _registered_method=True)
        self.SendCustomData = channel.unary_unary(
                '/sc.external.services.login.v1.LoginService/SendCustomData',
                request_serializer=login__service__pb2.SendCustomDataRequest.SerializeToString,
                response_deserializer=login__service__pb2.SendCustomDataResponse.FromString,
                _registered_method=True)
        self.LoginNotificationStream = channel.unary_stream(
                '/sc.external.services.login.v1.LoginService/LoginNotificationStream',
                request_serializer=login__service__pb2.LoginNotificationStreamRequest.SerializeToString,
                response_deserializer=login__service__pb2.LoginNotification.FromString,
                _registered_method=True)
        self.CharacterStatus = channel.unary_unary(
                '/sc.external.services.login.v1.LoginService/CharacterStatus',
                request_serializer=login__service__pb2.CharacterStatusRequest.SerializeToString,
                response_deserializer=login__service__pb2.CharacterStatusResponse.FromString,
                _registered_method=True)


class LoginServiceServicer(object):
    """------------------- LOGIN SERVICE -------------------
    Updated to match the real Star Citizen client protocol
    Handles authentication and session management only
    """

    def InitiateLogin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelLogin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefreshAuth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Complete2FA(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateFromStarNetwork(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLobbyReady(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MonitorConnection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportError(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessEntitlements(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReconcileAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCharacterStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendCustomData(self, request, context):
        """MITM custom data injection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoginNotificationStream(self, request, context):
        """CRITICAL: LoginNotificationStream for completing login flow after RSI access token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CharacterStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LoginServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitiateLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.InitiateLogin,
                    request_deserializer=login__service__pb2.InitiateLoginRequest.FromString,
                    response_serializer=login__service__pb2.InitiateLoginResponse.SerializeToString,
            ),
            'CancelLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelLogin,
                    request_deserializer=login__service__pb2.CancelLoginRequest.FromString,
                    response_serializer=login__service__pb2.CancelLoginResponse.SerializeToString,
            ),
            'RefreshAuth': grpc.unary_unary_rpc_method_handler(
                    servicer.RefreshAuth,
                    request_deserializer=login__service__pb2.RefreshAuthRequest.FromString,
                    response_serializer=login__service__pb2.RefreshAuthResponse.SerializeToString,
            ),
            'ValidateToken': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateToken,
                    request_deserializer=login__service__pb2.ValidateTokenRequest.FromString,
                    response_serializer=login__service__pb2.ValidateTokenResponse.SerializeToString,
            ),
            'VerifyDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyDevice,
                    request_deserializer=login__service__pb2.VerifyDeviceRequest.FromString,
                    response_serializer=login__service__pb2.VerifyDeviceResponse.SerializeToString,
            ),
            'Complete2FA': grpc.unary_unary_rpc_method_handler(
                    servicer.Complete2FA,
                    request_deserializer=login__service__pb2.Complete2FARequest.FromString,
                    response_serializer=login__service__pb2.Complete2FAResponse.SerializeToString,
            ),
            'UpdateFromStarNetwork': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateFromStarNetwork,
                    request_deserializer=login__service__pb2.UpdateFromStarNetworkRequest.FromString,
                    response_serializer=login__service__pb2.UpdateFromStarNetworkResponse.SerializeToString,
            ),
            'SetLobbyReady': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLobbyReady,
                    request_deserializer=login__service__pb2.SetLobbyReadyRequest.FromString,
                    response_serializer=login__service__pb2.SetLobbyReadyResponse.SerializeToString,
            ),
            'MonitorConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.MonitorConnection,
                    request_deserializer=login__service__pb2.MonitorConnectionRequest.FromString,
                    response_serializer=login__service__pb2.MonitorConnectionResponse.SerializeToString,
            ),
            'ReportError': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportError,
                    request_deserializer=login__service__pb2.ReportErrorRequest.FromString,
                    response_serializer=login__service__pb2.ReportErrorResponse.SerializeToString,
            ),
            'ProcessEntitlements': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessEntitlements,
                    request_deserializer=login__service__pb2.ProcessEntitlementsRequest.FromString,
                    response_serializer=login__service__pb2.ProcessEntitlementsResponse.SerializeToString,
            ),
            'ReconcileAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.ReconcileAccount,
                    request_deserializer=login__service__pb2.ReconcileAccountRequest.FromString,
                    response_serializer=login__service__pb2.ReconcileAccountResponse.SerializeToString,
            ),
            'UpdateCharacterStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCharacterStatus,
                    request_deserializer=login__service__pb2.UpdateCharacterStatusRequest.FromString,
                    response_serializer=login__service__pb2.UpdateCharacterStatusResponse.SerializeToString,
            ),
            'SendCustomData': grpc.unary_unary_rpc_method_handler(
                    servicer.SendCustomData,
                    request_deserializer=login__service__pb2.SendCustomDataRequest.FromString,
                    response_serializer=login__service__pb2.SendCustomDataResponse.SerializeToString,
            ),
            'LoginNotificationStream': grpc.unary_stream_rpc_method_handler(
                    servicer.LoginNotificationStream,
                    request_deserializer=login__service__pb2.LoginNotificationStreamRequest.FromString,
                    response_serializer=login__service__pb2.LoginNotification.SerializeToString,
            ),
            'CharacterStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.CharacterStatus,
                    request_deserializer=login__service__pb2.CharacterStatusRequest.FromString,
                    response_serializer=login__service__pb2.CharacterStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sc.external.services.login.v1.LoginService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('sc.external.services.login.v1.LoginService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LoginService(object):
    """------------------- LOGIN SERVICE -------------------
    Updated to match the real Star Citizen client protocol
    Handles authentication and session management only
    """

    @staticmethod
    def InitiateLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sc.external.services.login.v1.LoginService/InitiateLogin',
            login__service__pb2.InitiateLoginRequest.SerializeToString,
            login__service__pb2.InitiateLoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sc.external.services.login.v1.LoginService/CancelLogin',
            login__service__pb2.CancelLoginRequest.SerializeToString,
            login__service__pb2.CancelLoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RefreshAuth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sc.external.services.login.v1.LoginService/RefreshAuth',
            login__service__pb2.RefreshAuthRequest.SerializeToString,
            login__service__pb2.RefreshAuthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sc.external.services.login.v1.LoginService/ValidateToken',
            login__service__pb2.ValidateTokenRequest.SerializeToString,
            login__service__pb2.ValidateTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sc.external.services.login.v1.LoginService/VerifyDevice',
            login__service__pb2.VerifyDeviceRequest.SerializeToString,
            login__service__pb2.VerifyDeviceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Complete2FA(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sc.external.services.login.v1.LoginService/Complete2FA',
            login__service__pb2.Complete2FARequest.SerializeToString,
            login__service__pb2.Complete2FAResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateFromStarNetwork(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sc.external.services.login.v1.LoginService/UpdateFromStarNetwork',
            login__service__pb2.UpdateFromStarNetworkRequest.SerializeToString,
            login__service__pb2.UpdateFromStarNetworkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetLobbyReady(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sc.external.services.login.v1.LoginService/SetLobbyReady',
            login__service__pb2.SetLobbyReadyRequest.SerializeToString,
            login__service__pb2.SetLobbyReadyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MonitorConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sc.external.services.login.v1.LoginService/MonitorConnection',
            login__service__pb2.MonitorConnectionRequest.SerializeToString,
            login__service__pb2.MonitorConnectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportError(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sc.external.services.login.v1.LoginService/ReportError',
            login__service__pb2.ReportErrorRequest.SerializeToString,
            login__service__pb2.ReportErrorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessEntitlements(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sc.external.services.login.v1.LoginService/ProcessEntitlements',
            login__service__pb2.ProcessEntitlementsRequest.SerializeToString,
            login__service__pb2.ProcessEntitlementsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReconcileAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sc.external.services.login.v1.LoginService/ReconcileAccount',
            login__service__pb2.ReconcileAccountRequest.SerializeToString,
            login__service__pb2.ReconcileAccountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCharacterStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sc.external.services.login.v1.LoginService/UpdateCharacterStatus',
            login__service__pb2.UpdateCharacterStatusRequest.SerializeToString,
            login__service__pb2.UpdateCharacterStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendCustomData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sc.external.services.login.v1.LoginService/SendCustomData',
            login__service__pb2.SendCustomDataRequest.SerializeToString,
            login__service__pb2.SendCustomDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoginNotificationStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/sc.external.services.login.v1.LoginService/LoginNotificationStream',
            login__service__pb2.LoginNotificationStreamRequest.SerializeToString,
            login__service__pb2.LoginNotification.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CharacterStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sc.external.services.login.v1.LoginService/CharacterStatus',
            login__service__pb2.CharacterStatusRequest.SerializeToString,
            login__service__pb2.CharacterStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
